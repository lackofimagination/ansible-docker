---
- name: install dependencies
  apt:
    pkg:
      - apt-transport-https
      - ca-certificates
      - cron
      - gnupg2
      - python-pip
      - software-properties-common
      - curl
    state: present
    update_cache: true
    cache_valid_time: 86400

- name: add docker gpg key
  apt_key:
    id: '{{ docker_apt_key_id }}'
    url: '{{ docker_apt_key_server }}'
  when: not docker_upload_local

- name: add docker apt repository
  apt_repository:
    repo: >
      deb [arch=amd64]
      https://download.docker.com/linux/ubuntu
      xenial
      stable
    update_cache: true
  when: not docker_upload_local

- name: pip install docker
  pip:
    name: docker

- name: install docker
  apt:
    pkg: 'docker-ce'
    state: present
  when: not docker_upload_local

- name: upload docker deb packages
  copy:
    src: '{{ docker_local_dir }}{{ item }}'
    dest: '/opt/{{ item }}'
  with_items:
    - '{{ docker_local_cli_deb }}'
    - '{{ docker_local_main_deb }}'
    - '{{ docker_local_containerd_deb }}'
  when: docker_upload_local

- name: install docker cli package
  apt:
    deb: '/opt/{{ docker_local_cli_deb }}'
  when: docker_upload_local

- name: install containerd package
  apt:
    deb: '/opt/{{ docker_local_containerd_deb }}'
  when: docker_upload_local

- name: install docker deb package
  apt:
    deb: '/opt/{{ docker_local_main_deb }}'
  when: docker_upload_local

- name: check if docker user exists
  command: 'id {{ docker_user }}'
  ignore_errors: true
  changed_when: false
  register: user_exists

- name: add docker user
  group:
    name: '{{ docker_group }}'
    state: present
  when: user_exists is failed

- name: add docker user
  user:
    name: '{{ docker_user }}'
    group: '{{ docker_group }}'
    comment: 'docker'
    shell: '/sbin/nologin'
    system: false
  when: user_exists is failed

- name: create docker directory
  file:
    path: '/etc/docker'
    state: directory
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: create containerd service directory
  file:
    path: '/etc/systemd/system/containerd.service.d'
    state: directory
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: create docker configuration directory
  file:
    path: '/etc/systemd/system/docker.service.d'
    state: directory
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: create containerd service override
  template:
    src: 'override.conf.j2'
    dest: '/etc/systemd/system/containerd.service.d/override.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: create docker daemon options
  template:
    src: 'daemon.json.j2'
    dest: '/etc/docker/daemon.json'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: create docker daemon service options
  template:
    src: 'options.conf.j2'
    dest: '/etc/systemd/system/docker.service.d/options.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: create docker daemon environment
  template:
    src: 'environment.conf.j2'
    dest: '/etc/systemd/system/docker.service.d/environment.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: reload systemd daemon
  systemd:
    daemon_reload: true
  notify: restart docker

- meta: flush_handlers

- name: ensure docker is running
  service:
    name: 'docker'
    state: started
    enabled: true

- name: install docker compose
  get_url:
    url: '{{ docker_compose_url }}'
    dest: '/usr/local/bin/docker-compose'
    force: true
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: not docker_upload_local

- name: upload docker compose
  copy:
    src: '{{ docker_local_dir }}{{ docker_local_compose }}'
    dest: '/usr/local/bin/docker-compose'
    force: true
    owner: 'root'
    group: 'root'
    mode: '0755'
  when: docker_upload_local

- name: create cron jobs
  cron:
    name: '{{ item.name }}'
    job: '{{ item.job }}'
    minute: '{{ item.schedule[0] }}'
    hour: '{{ item.schedule[1] }}'
    day: '{{ item.schedule[2] }}'
    month: '{{ item.schedule[3] }}'
    weekday: '{{ item.schedule[4] }}'
    cron_file: '{{ item.cron_file }}'
    user: '{{ item.user | default("root") }}'
  with_items: '{{ docker_cron_jobs }}'
  when:
    - item.name | default() and item.job | default()
    - item.schedule | default() and item.cron_file | default()
